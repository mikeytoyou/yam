<?php

namespace Proxies\__CG__\alex\yamBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class TrProductLang extends \alex\yamBundle\Entity\TrProductLang implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'idProduct', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'idShop', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'idLang', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'description', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'descriptionShort', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'linkRewrite', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'metaDescription', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'metaKeywords', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'metaTitle', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'name', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'availableNow', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'availableLater');
        }

        return array('__isInitialized__', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'idProduct', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'idShop', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'idLang', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'description', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'descriptionShort', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'linkRewrite', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'metaDescription', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'metaKeywords', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'metaTitle', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'name', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'availableNow', '' . "\0" . 'alex\\yamBundle\\Entity\\TrProductLang' . "\0" . 'availableLater');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (TrProductLang $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setIdProduct($idProduct)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdProduct', array($idProduct));

        return parent::setIdProduct($idProduct);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdProduct()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdProduct();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdProduct', array());

        return parent::getIdProduct();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdShop($idShop)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdShop', array($idShop));

        return parent::setIdShop($idShop);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdShop()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdShop();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdShop', array());

        return parent::getIdShop();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdLang($idLang)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdLang', array($idLang));

        return parent::setIdLang($idLang);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdLang()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdLang();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdLang', array());

        return parent::getIdLang();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescriptionShort($descriptionShort)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescriptionShort', array($descriptionShort));

        return parent::setDescriptionShort($descriptionShort);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescriptionShort()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescriptionShort', array());

        return parent::getDescriptionShort();
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkRewrite($linkRewrite)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkRewrite', array($linkRewrite));

        return parent::setLinkRewrite($linkRewrite);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkRewrite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkRewrite', array());

        return parent::getLinkRewrite();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaDescription($metaDescription)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaDescription', array($metaDescription));

        return parent::setMetaDescription($metaDescription);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaDescription', array());

        return parent::getMetaDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaKeywords($metaKeywords)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaKeywords', array($metaKeywords));

        return parent::setMetaKeywords($metaKeywords);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaKeywords()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaKeywords', array());

        return parent::getMetaKeywords();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetaTitle($metaTitle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetaTitle', array($metaTitle));

        return parent::setMetaTitle($metaTitle);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetaTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetaTitle', array());

        return parent::getMetaTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setAvailableNow($availableNow)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAvailableNow', array($availableNow));

        return parent::setAvailableNow($availableNow);
    }

    /**
     * {@inheritDoc}
     */
    public function getAvailableNow()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAvailableNow', array());

        return parent::getAvailableNow();
    }

    /**
     * {@inheritDoc}
     */
    public function setAvailableLater($availableLater)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAvailableLater', array($availableLater));

        return parent::setAvailableLater($availableLater);
    }

    /**
     * {@inheritDoc}
     */
    public function getAvailableLater()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAvailableLater', array());

        return parent::getAvailableLater();
    }

}
