<?php

namespace Proxies\__CG__\alex\yamBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class TrStock extends \alex\yamBundle\Entity\TrStock implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'idStock', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'idWarehouse', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'idProduct', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'idProductAttribute', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'reference', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'ean13', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'upc', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'physicalQuantity', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'usableQuantity', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'priceTe');
        }

        return array('__isInitialized__', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'idStock', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'idWarehouse', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'idProduct', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'idProductAttribute', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'reference', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'ean13', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'upc', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'physicalQuantity', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'usableQuantity', '' . "\0" . 'alex\\yamBundle\\Entity\\TrStock' . "\0" . 'priceTe');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (TrStock $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getIdStock()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdStock();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdStock', array());

        return parent::getIdStock();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdWarehouse($idWarehouse)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdWarehouse', array($idWarehouse));

        return parent::setIdWarehouse($idWarehouse);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdWarehouse()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdWarehouse', array());

        return parent::getIdWarehouse();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdProduct($idProduct)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdProduct', array($idProduct));

        return parent::setIdProduct($idProduct);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdProduct()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdProduct', array());

        return parent::getIdProduct();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdProductAttribute($idProductAttribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdProductAttribute', array($idProductAttribute));

        return parent::setIdProductAttribute($idProductAttribute);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdProductAttribute()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdProductAttribute', array());

        return parent::getIdProductAttribute();
    }

    /**
     * {@inheritDoc}
     */
    public function setReference($reference)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReference', array($reference));

        return parent::setReference($reference);
    }

    /**
     * {@inheritDoc}
     */
    public function getReference()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReference', array());

        return parent::getReference();
    }

    /**
     * {@inheritDoc}
     */
    public function setEan13($ean13)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEan13', array($ean13));

        return parent::setEan13($ean13);
    }

    /**
     * {@inheritDoc}
     */
    public function getEan13()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEan13', array());

        return parent::getEan13();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpc($upc)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpc', array($upc));

        return parent::setUpc($upc);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpc()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpc', array());

        return parent::getUpc();
    }

    /**
     * {@inheritDoc}
     */
    public function setPhysicalQuantity($physicalQuantity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhysicalQuantity', array($physicalQuantity));

        return parent::setPhysicalQuantity($physicalQuantity);
    }

    /**
     * {@inheritDoc}
     */
    public function getPhysicalQuantity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhysicalQuantity', array());

        return parent::getPhysicalQuantity();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsableQuantity($usableQuantity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsableQuantity', array($usableQuantity));

        return parent::setUsableQuantity($usableQuantity);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsableQuantity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsableQuantity', array());

        return parent::getUsableQuantity();
    }

    /**
     * {@inheritDoc}
     */
    public function setPriceTe($priceTe)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPriceTe', array($priceTe));

        return parent::setPriceTe($priceTe);
    }

    /**
     * {@inheritDoc}
     */
    public function getPriceTe()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPriceTe', array());

        return parent::getPriceTe();
    }

}
