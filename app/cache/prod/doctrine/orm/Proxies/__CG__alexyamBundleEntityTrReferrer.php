<?php

namespace Proxies\__CG__\alex\yamBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class TrReferrer extends \alex\yamBundle\Entity\TrReferrer implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'idReferrer', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'name', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'passwd', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'httpRefererRegexp', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'httpRefererLike', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'requestUriRegexp', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'requestUriLike', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'httpRefererRegexpNot', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'httpRefererLikeNot', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'requestUriRegexpNot', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'requestUriLikeNot', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'baseFee', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'percentFee', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'clickFee', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'dateAdd');
        }

        return array('__isInitialized__', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'idReferrer', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'name', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'passwd', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'httpRefererRegexp', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'httpRefererLike', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'requestUriRegexp', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'requestUriLike', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'httpRefererRegexpNot', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'httpRefererLikeNot', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'requestUriRegexpNot', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'requestUriLikeNot', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'baseFee', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'percentFee', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'clickFee', '' . "\0" . 'alex\\yamBundle\\Entity\\TrReferrer' . "\0" . 'dateAdd');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (TrReferrer $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getIdReferrer()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdReferrer();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdReferrer', array());

        return parent::getIdReferrer();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setPasswd($passwd)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPasswd', array($passwd));

        return parent::setPasswd($passwd);
    }

    /**
     * {@inheritDoc}
     */
    public function getPasswd()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPasswd', array());

        return parent::getPasswd();
    }

    /**
     * {@inheritDoc}
     */
    public function setHttpRefererRegexp($httpRefererRegexp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHttpRefererRegexp', array($httpRefererRegexp));

        return parent::setHttpRefererRegexp($httpRefererRegexp);
    }

    /**
     * {@inheritDoc}
     */
    public function getHttpRefererRegexp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHttpRefererRegexp', array());

        return parent::getHttpRefererRegexp();
    }

    /**
     * {@inheritDoc}
     */
    public function setHttpRefererLike($httpRefererLike)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHttpRefererLike', array($httpRefererLike));

        return parent::setHttpRefererLike($httpRefererLike);
    }

    /**
     * {@inheritDoc}
     */
    public function getHttpRefererLike()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHttpRefererLike', array());

        return parent::getHttpRefererLike();
    }

    /**
     * {@inheritDoc}
     */
    public function setRequestUriRegexp($requestUriRegexp)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRequestUriRegexp', array($requestUriRegexp));

        return parent::setRequestUriRegexp($requestUriRegexp);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequestUriRegexp()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequestUriRegexp', array());

        return parent::getRequestUriRegexp();
    }

    /**
     * {@inheritDoc}
     */
    public function setRequestUriLike($requestUriLike)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRequestUriLike', array($requestUriLike));

        return parent::setRequestUriLike($requestUriLike);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequestUriLike()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequestUriLike', array());

        return parent::getRequestUriLike();
    }

    /**
     * {@inheritDoc}
     */
    public function setHttpRefererRegexpNot($httpRefererRegexpNot)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHttpRefererRegexpNot', array($httpRefererRegexpNot));

        return parent::setHttpRefererRegexpNot($httpRefererRegexpNot);
    }

    /**
     * {@inheritDoc}
     */
    public function getHttpRefererRegexpNot()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHttpRefererRegexpNot', array());

        return parent::getHttpRefererRegexpNot();
    }

    /**
     * {@inheritDoc}
     */
    public function setHttpRefererLikeNot($httpRefererLikeNot)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHttpRefererLikeNot', array($httpRefererLikeNot));

        return parent::setHttpRefererLikeNot($httpRefererLikeNot);
    }

    /**
     * {@inheritDoc}
     */
    public function getHttpRefererLikeNot()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHttpRefererLikeNot', array());

        return parent::getHttpRefererLikeNot();
    }

    /**
     * {@inheritDoc}
     */
    public function setRequestUriRegexpNot($requestUriRegexpNot)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRequestUriRegexpNot', array($requestUriRegexpNot));

        return parent::setRequestUriRegexpNot($requestUriRegexpNot);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequestUriRegexpNot()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequestUriRegexpNot', array());

        return parent::getRequestUriRegexpNot();
    }

    /**
     * {@inheritDoc}
     */
    public function setRequestUriLikeNot($requestUriLikeNot)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRequestUriLikeNot', array($requestUriLikeNot));

        return parent::setRequestUriLikeNot($requestUriLikeNot);
    }

    /**
     * {@inheritDoc}
     */
    public function getRequestUriLikeNot()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRequestUriLikeNot', array());

        return parent::getRequestUriLikeNot();
    }

    /**
     * {@inheritDoc}
     */
    public function setBaseFee($baseFee)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBaseFee', array($baseFee));

        return parent::setBaseFee($baseFee);
    }

    /**
     * {@inheritDoc}
     */
    public function getBaseFee()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBaseFee', array());

        return parent::getBaseFee();
    }

    /**
     * {@inheritDoc}
     */
    public function setPercentFee($percentFee)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPercentFee', array($percentFee));

        return parent::setPercentFee($percentFee);
    }

    /**
     * {@inheritDoc}
     */
    public function getPercentFee()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPercentFee', array());

        return parent::getPercentFee();
    }

    /**
     * {@inheritDoc}
     */
    public function setClickFee($clickFee)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClickFee', array($clickFee));

        return parent::setClickFee($clickFee);
    }

    /**
     * {@inheritDoc}
     */
    public function getClickFee()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClickFee', array());

        return parent::getClickFee();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateAdd($dateAdd)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateAdd', array($dateAdd));

        return parent::setDateAdd($dateAdd);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateAdd()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateAdd', array());

        return parent::getDateAdd();
    }

}
